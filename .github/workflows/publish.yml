name: Version and Publish packages to GitHub Packages

on:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all history is fetched for versioning
      - name: Find package directories
        id: packages
        run: |
          # Find all package.json files under libs and extract their directories
          packages=$(find libs -name 'package.json' -exec dirname {} \;)
          echo "$packages" > packages.txt
          # Format the output as JSON array
          jq -R -s 'split("\n") | map(select(length > 0))' packages.txt > packages.json
          cat packages.json
          echo "::set-output name=packages::$(cat packages.json | jq -c .)"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        package: ${{ fromJSON(needs.prepare.outputs.packages) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@zimoykin'
      - name: Fix permissions
        run: sudo chown -R $USER:$USER .
      - name: Create .npmrc file in the project directory
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_ACCESS_TOKEN }}" > ~/.npmrc
          echo "registry=https://npm.pkg.github.com" >> ~/.npmrc
      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # Process each package in the matrix
      - name: Check if package.json exists
        working-directory: ${{ matrix.package }}
        run: |
          if [ ! -f package.json ]; then
            echo "Error: package.json not found in ${{ matrix.package }}"
            exit 1
          fi

      - name: Install dependencies
        working-directory: ${{ matrix.package }}
        run: npm ci

      - name: Bump version
        working-directory: ${{ matrix.package }}
        run: |
          # Bump version manually
          current_version=$(jq -r '.version' package.json)
          IFS='.' read -r major minor patch <<< "$current_version"
          new_version="$major.$minor.$((patch + 1))"
          jq --arg version "$new_version" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Commit version bump
          git add package.json
          git commit -m "chore(release): $new_version"
          git tag "v$new_version"

      - name: Push changes
        run: |
          git push --follow-tags origin main
